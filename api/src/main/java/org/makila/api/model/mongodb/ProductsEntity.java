package org.makila.api.model.mongodb;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.math.BigDecimal;
import org.bson.codecs.pojo.annotations.BsonProperty;
import org.springframework.data.mongodb.core.mapping.Document;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.constraints.NotNull;


import java.util.*;
import javax.annotation.Generated;

/**
 * Generated by MongoDB Relational Migrator 
* https://www.mongodb.com/products/relational-migrator 
* Collection: products
* Language: Java
* Template: POJO
* Generated on 11/13/24

 */
@JsonTypeName("products")
@Generated(value = "com.mongodb.migrator.application.codegen.config.java.JavaSpringCodegenConfig", date = "2024-11-13T19:15:26.151300-06:00[America/Chicago]", comments = "Generator version: 7.7.0")@Document("products")
public class ProductsEntity {

  @BsonProperty("_id")
  private Integer id;

  @BsonProperty("category")
  private Integer category;

  @BsonProperty("title")
  private String title;

  @BsonProperty("actor")
  private String actor;

  @BsonProperty("price")
  private BigDecimal price;

  @BsonProperty("special")
  private Integer special;

  @BsonProperty("commonProdId")
  private Integer commonProdId;

  @BsonProperty("categoryname")
  private String categoryname;

  public ProductsEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  
  @JsonProperty("_id")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ProductsEntity category(Integer category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  
  @JsonProperty("category")
  public Integer getCategory() {
    return category;
  }

  public void setCategory(Integer category) {
    this.category = category;
  }

  public ProductsEntity title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  
  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ProductsEntity actor(String actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Get actor
   * @return actor
   */
  
  @JsonProperty("actor")
  public String getActor() {
    return actor;
  }

  public void setActor(String actor) {
    this.actor = actor;
  }

  public ProductsEntity price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  
  @JsonProperty("price")
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }

  public ProductsEntity special(Integer special) {
    this.special = special;
    return this;
  }

  /**
   * Get special
   * @return special
   */
  
  @JsonProperty("special")
  public Integer getSpecial() {
    return special;
  }

  public void setSpecial(Integer special) {
    this.special = special;
  }

  public ProductsEntity commonProdId(Integer commonProdId) {
    this.commonProdId = commonProdId;
    return this;
  }

  /**
   * Get commonProdId
   * @return commonProdId
   */
  
  @JsonProperty("commonProdId")
  public Integer getCommonProdId() {
    return commonProdId;
  }

  public void setCommonProdId(Integer commonProdId) {
    this.commonProdId = commonProdId;
  }

  public ProductsEntity categoryname(String categoryname) {
    this.categoryname = categoryname;
    return this;
  }

  /**
   * Get categoryname
   * @return categoryname
   */
  
  @JsonProperty("categoryname")
  public String getCategoryname() {
    return categoryname;
  }

  public void setCategoryname(String categoryname) {
    this.categoryname = categoryname;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductsEntity products = (ProductsEntity) o;
    return Objects.equals(this.id, products.id) &&
        Objects.equals(this.category, products.category) &&
        Objects.equals(this.title, products.title) &&
        Objects.equals(this.actor, products.actor) &&
        Objects.equals(this.price, products.price) &&
        Objects.equals(this.special, products.special) &&
        Objects.equals(this.commonProdId, products.commonProdId) &&
        Objects.equals(this.categoryname, products.categoryname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, category, title, actor, price, special, commonProdId, categoryname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductsEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    special: ").append(toIndentedString(special)).append("\n");
    sb.append("    commonProdId: ").append(toIndentedString(commonProdId)).append("\n");
    sb.append("    categoryname: ").append(toIndentedString(categoryname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

